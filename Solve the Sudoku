/* question link : https://practice.geeksforgeeks.org/problems/solve-the-sudoku-1587115621/1 
  question solution : https://www.youtube.com/watch?v=E5Fz4-ylZ3E&ab_channel=GeeksforGeeksPractice    */


#include <bits/stdc++.h>
using namespace std;
// UNASSIGNED is used for empty cells in sudoku grid 
#define UNASSIGNED 0  

// N is used for the size of Sudoku grid.  
// Size will be N x N  
#define N 9  

class Solution 
{
    public:
    int solved=0;
    
    int calculate_grid(int i,int j){
        if(i<=2 && j<=2)    return 0;       //0th square block
        if(i<=2 && j<=5)    return 1;       //1th square block
        if(i<=2 && j<=8)    return 2;       //2th square block
        if(i<=5 && j<=2)    return 3;       //3th square block
        if(i<=5 && j<=5)    return 4;       //4th square block
        if(i<=5 && j<=8)    return 5;       //5th square block
        if(i<=8 && j<=2)    return 6;       //6th square block
        if(i<=8 && j<=5)    return 7;       //7th square block
        if(i<=8 && j<=8)    return 8;       //8th square block
    }
    
    bool checkGrid(int row[][10], int column[][10], int square[][10], int grid[N][N]){
        bool ans=true;
        int i,j,k;
        
        for(i=0;i<9;i++){
            for(j=1;j<=9;j++){
                if(row[i][j]!=1){   //all value should be occur once in a row
                    ans=false;
                    break;
                }
            }
        }
        for(i=0;i<9 && ans;i++){
            for(j=1;j<=9;j++){
                if(column[i][j]!=1){   //all value should be occur once in a column
                    ans=false;
                    break;
                }
            }
        }
        for(i=0;i<9 && ans;i++){
            for(j=1;j<=9;j++){
                if(square[calculate_grid(i,j-1)][j]!=1){   //all value should be occur once in a square
                    ans=false;
                    break;
                }
            }
        }
        return ans;
    }
    
    void fillGrid(int grid[N][N], int empty[][9], int i, int j,int row[][10], int column[][10], int square[][10]){
        if(i==9){   //if reached in 9th row which is not present
            if(checkGrid(row, column, square, grid))  solved=1;   //if we made a solution
            return;
        }
        
        if(empty[i][j]==1){ //if their is NO value filled
            for(int k=1;k<=9 && solved==0;k++){     //fills all posibility 0-8
                if(row[i][k]==1 || column[j][k]==1 || square[calculate_grid(i,j)][k]==1)
                    continue;       //if 'k' is filled once in any of these
                
                grid[i][j]=k;
                row[i][k]++;
                column[j][k]++;
                square[calculate_grid(i,j)][k]++;
                
                if(j==8)    // if we reached in last column
                    fillGrid(grid,empty,i+1,0,row,column,square);
                else        //if a row not traversed in all column
                    fillGrid(grid,empty,i,j+1,row,column,square);
                    
                row[i][k]--;        //backtracking
                column[j][k]--;
                square[calculate_grid(i,j)][k]--;
            }
        }
        else{   //if the grid[i][j] is already filled
            if(j==8)    fillGrid(grid,empty,i+1,0,row,column,square);
            else        fillGrid(grid,empty,i,j+1,row,column,square);
        }
    }
    bool SolveSudoku(int grid[N][N])  
    { 
        int empty[9][9];        //checks whether i,j box is filled for not
        int row[9][10];         //counts the value of grid[i][j] in i th row
        int column[9][10];      //counts the value of grid[i][j] in j th column
        int square[9][10];      //counts the value of grid[i][j] in each sqare(3 x 3) block
        int i,j,k;
        
        for(i=0;i<9;i++){
            for(j=0;j<10;j++){
                row[i][j]=column[i][j]=square[i][j]=0;  //filling initial value as 0
            }
        }
        
        for(i=0;i<9;i++){
            for(j=0; j<9;j++){
                if(grid[i][j]==0)   empty[i][j]=1;  //if not filled we have to fill
                else{           
                    row[i][grid[i][j]]++;       //increase count of grid[i][j] in i th row
                    column[j][grid[i][j]]++;    //increase count of grid[i][j] in j th column
                    square[calculate_grid(i,j)][grid[i][j]]++;  //increase in square matrix
                    empty[i][j]=0;  //0 represent empty
                }
            }
        }
        
        fillGrid(grid,empty,0,0,row,column,square);
        
        if(solved==1)   return true;
        else return false;
    }
    
    //Function to print grids of the Sudoku.
    void printGrid (int grid[N][N]) 
    {
        // Your code here 
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++)
                cout<<grid[i][j]<<" ";
        }
    }
};

int main() {
	int t;
	cin>>t;
	while(t--)
	{
		int grid[N][N];
		
		for(int i=0;i<9;i++)
		    for(int j=0;j<9;j++)
		        cin>>grid[i][j];
		        
		Solution ob;
		
		if (ob.SolveSudoku(grid) == true)  
            ob.printGrid(grid);  
        else
            cout << "No solution exists";  
        
        cout<<endl;
	}
	
	return 0;
}
